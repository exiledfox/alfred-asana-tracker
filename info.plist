<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>it.ggallo.ab.asana</string>
	<key>category</key>
	<string>Productivity</string>
	<key>connections</key>
	<dict>
		<key>0C4BE506-024B-42E9-B927-6038D381B10B</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>D04C032E-4935-4CA7-BA2D-76866C84C8BE</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>D8740DEC-694B-4897-9488-0542188AA7CC</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>sourceoutputuid</key>
				<string>E67CB72C-CD05-43D7-B6A5-B3AC5720BA3E</string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>0C9C9CC4-3B18-4013-8083-FCB108F83588</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>B9CE2989-5779-4950-BAE3-14C535A76B44</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>0CE6243C-714C-475E-99FB-298743B1029A</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>12155588-A73A-4876-8BA2-39FA742BD898</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>1E432292-7E99-45F7-BD45-CEECF5AFCFA0</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>1A30DD4D-5A3A-4D4D-B407-0E6B568A88AC</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>sourceoutputuid</key>
				<string>F6837E6D-3185-490D-8854-EE81832250CB</string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>62ECF140-70C7-4B72-8FD8-5C3047061EA1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>sourceoutputuid</key>
				<string>E67CB72C-CD05-43D7-B6A5-B3AC5720BA3E</string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>283BAFA7-68C2-4B95-A95C-FB4506BEDC4D</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>ACC025AC-6B45-4713-97C7-80D63853908B</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>336CAF2F-4B07-49AF-BF07-5B96B95C2801</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>F0C22B21-294E-435D-83CA-A0BEA8D92CA0</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>40CF6DB0-8C55-4F34-A715-41FE82053916</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>B57872F2-D938-4304-A0FA-0A0DA4478848</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>47D97526-F5A1-4377-B446-5ECCD709DF74</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>1E432292-7E99-45F7-BD45-CEECF5AFCFA0</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>4FC54738-4C0B-4A00-9C35-59F77BA48898</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>5FB32237-CCB6-403D-9D61-7B5F35625B3E</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>5D0B3FEC-195C-4384-99B6-12A4DDFAA97B</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>0CE6243C-714C-475E-99FB-298743B1029A</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>D8740DEC-694B-4897-9488-0542188AA7CC</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>sourceoutputuid</key>
				<string>E67CB72C-CD05-43D7-B6A5-B3AC5720BA3E</string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>5FB32237-CCB6-403D-9D61-7B5F35625B3E</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>0DD01E73-7D47-4896-BD37-36C34937C33D</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>E38F07D2-41A5-4290-AA74-B0539219F8BC</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>62ECF140-70C7-4B72-8FD8-5C3047061EA1</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>CEF43D54-F9E3-43D7-A4F3-654B6D4360B6</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>6C43B7F2-E0F5-45CC-9C13-8EDBF49AFA35</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>9B8986E6-2B75-4F52-8277-EC33644ACACA</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>6CE4894A-D594-40F6-8ADB-EFD829034766</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>E5F82272-7CF7-4E47-8B82-966A725C31E9</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>8255AAFF-417C-405F-B306-3804A35755E0</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>4FC54738-4C0B-4A00-9C35-59F77BA48898</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>84804C2D-CB41-4392-B067-4E7C8BA4353A</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>40CF6DB0-8C55-4F34-A715-41FE82053916</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>D8740DEC-694B-4897-9488-0542188AA7CC</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>sourceoutputuid</key>
				<string>E67CB72C-CD05-43D7-B6A5-B3AC5720BA3E</string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>87418458-8B72-4FF0-B37D-02D77C9A82C7</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>48BBBA45-8BE9-4621-87B7-E7B5CAB82CFD</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>87A4FBBB-B4F7-481F-97EF-BF1295C1614E</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>0C4BE506-024B-42E9-B927-6038D381B10B</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>8AF36CEE-15AC-4B4C-A652-6C099C7D9FED</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>F489E77B-6691-4ADB-80CD-A62E6DF15029</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>9B8986E6-2B75-4F52-8277-EC33644ACACA</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>D8740DEC-694B-4897-9488-0542188AA7CC</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>sourceoutputuid</key>
				<string>E67CB72C-CD05-43D7-B6A5-B3AC5720BA3E</string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>BDA1B503-0986-4148-ACBD-425E5405B9AC</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>9C031572-A8B4-4134-8F7C-986908E0E7B0</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>D8740DEC-694B-4897-9488-0542188AA7CC</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>sourceoutputuid</key>
				<string>E67CB72C-CD05-43D7-B6A5-B3AC5720BA3E</string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>87418458-8B72-4FF0-B37D-02D77C9A82C7</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>A836C5C2-B083-45F9-AD2A-99B508CCD964</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>84804C2D-CB41-4392-B067-4E7C8BA4353A</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>A8C948C3-DD9E-4964-B03A-52050BE581E2</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>A836C5C2-B083-45F9-AD2A-99B508CCD964</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>BB07AF18-F262-4F34-85DE-6905401946AC</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>54A7E923-789C-4D73-9346-631031EE2394</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>BB88F20A-B8E1-48D6-9D27-2A12174D5624</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>C293EC4D-36FB-4014-8CF9-9A6DB1072107</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>BDA1B503-0986-4148-ACBD-425E5405B9AC</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>AE7939C9-A501-420D-B59D-F9F018611002</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>C293EC4D-36FB-4014-8CF9-9A6DB1072107</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>8AF36CEE-15AC-4B4C-A652-6C099C7D9FED</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>sourceoutputuid</key>
				<string>CF13B001-0067-4943-88C5-0D154230079A</string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>A8C948C3-DD9E-4964-B03A-52050BE581E2</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>sourceoutputuid</key>
				<string>E67CB72C-CD05-43D7-B6A5-B3AC5720BA3E</string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>DFF88241-2225-4F77-B999-26D45929B05F</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>0C9C9CC4-3B18-4013-8083-FCB108F83588</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>sourceoutputuid</key>
				<string>989D2871-4D3D-44C7-A453-029B8DE4E8FF</string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>D8740DEC-694B-4897-9488-0542188AA7CC</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>sourceoutputuid</key>
				<string>A62F4648-E1A1-4C85-8412-303DE2D7CC4C</string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>C80FD136-F125-466F-85AB-6669F343CC99</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>B5E90B4A-D1F5-43E1-892B-3F6F17D44210</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>CEF43D54-F9E3-43D7-A4F3-654B6D4360B6</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>BB07AF18-F262-4F34-85DE-6905401946AC</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>D04C032E-4935-4CA7-BA2D-76866C84C8BE</key>
		<array/>
		<key>D8740DEC-694B-4897-9488-0542188AA7CC</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>47D97526-F5A1-4377-B446-5ECCD709DF74</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>DD5DA8E6-6612-40DF-9069-C254172E6842</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>8255AAFF-417C-405F-B306-3804A35755E0</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>sourceoutputuid</key>
				<string>E67CB72C-CD05-43D7-B6A5-B3AC5720BA3E</string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>E38F07D2-41A5-4290-AA74-B0539219F8BC</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>DF48C549-1ECF-4E52-9C1A-4FEF0124F209</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>0C9C9CC4-3B18-4013-8083-FCB108F83588</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>DFF88241-2225-4F77-B999-26D45929B05F</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>EFC316CD-00C4-40EC-885C-698142DA77F5</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>E38F07D2-41A5-4290-AA74-B0539219F8BC</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>A4E22521-C53F-418D-BC93-79166E299FE2</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>E5F82272-7CF7-4E47-8B82-966A725C31E9</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>8AF36CEE-15AC-4B4C-A652-6C099C7D9FED</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>sourceoutputuid</key>
				<string>E67CB72C-CD05-43D7-B6A5-B3AC5720BA3E</string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>DF48C549-1ECF-4E52-9C1A-4FEF0124F209</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>D8740DEC-694B-4897-9488-0542188AA7CC</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>sourceoutputuid</key>
				<string>A8A3BE8A-F7D8-4A87-8E20-90BB823ABE1E</string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>EFC316CD-00C4-40EC-885C-698142DA77F5</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>DD5DA8E6-6612-40DF-9069-C254172E6842</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>F0C22B21-294E-435D-83CA-A0BEA8D92CA0</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>283BAFA7-68C2-4B95-A95C-FB4506BEDC4D</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>D8740DEC-694B-4897-9488-0542188AA7CC</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>sourceoutputuid</key>
				<string>E67CB72C-CD05-43D7-B6A5-B3AC5720BA3E</string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>F489E77B-6691-4ADB-80CD-A62E6DF15029</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>5D0B3FEC-195C-4384-99B6-12A4DDFAA97B</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>F79B7E0A-779F-41AF-9484-E2BB15083B64</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>F9C1C19E-5105-45DD-9857-FE7AC5939E40</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>F9C1C19E-5105-45DD-9857-FE7AC5939E40</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>A8C948C3-DD9E-4964-B03A-52050BE581E2</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>sourceoutputuid</key>
				<string>E67CB72C-CD05-43D7-B6A5-B3AC5720BA3E</string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>C80FD136-F125-466F-85AB-6669F343CC99</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>D8740DEC-694B-4897-9488-0542188AA7CC</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>sourceoutputuid</key>
				<string>63738C59-74BB-4A3A-962B-3AFEBE193060</string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>FB6B0D28-60A2-4298-9AE7-9741A1BC8F02</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>9C031572-A8B4-4134-8F7C-986908E0E7B0</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Giuseppe Maria Gallo</string>
	<key>description</key>
	<string>Manage Asana tasks and track your time</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Asana Tracker</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<true/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>asn set project</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Loading projects...</string>
				<key>script</key>
				<string>import json
import os
import sys

from asana.api import get_projects
from utils import get_token
from workflow import MATCH_ALL, MATCH_ALLCHARS, PasswordNotFound, Workflow3
from workflow.background import run_in_background

CACHE_SECONDS = int(os.getenv("PROJECT_LIST_CACHE_SECONDS"))


def main(wf):
    token = get_token(wf)
    if not token:
        return 0

    query = "{query}"
    if not wf.cached_data_fresh("get_projects", CACHE_SECONDS):
        run_in_background(
            "update_projects", ["/usr/local/bin/python", wf.workflowfile("update_projects.py")]
        )
    projects = wf.cached_data("get_projects", lambda: get_projects(token), max_age=0)
    filtered_projects = wf.filter(
        query,
        projects,
        lambda project: project["name"],
        match_on=MATCH_ALL ^ MATCH_ALLCHARS,
        min_score=20,
    )
    for project in filtered_projects:
        wf.add_item("Select default Project", project["name"], valid=True, arg=json.dumps(project), uid=project["gid"])
    if len(filtered_projects) == 0:
        wf.add_item(
            "No projects found",
            valid=False,
        )

    wf.send_feedback()
    return 0


if __name__ == "__main__":
    wf = Workflow3()
    sys.exit(wf.run(main))
</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Select default Project</string>
				<key>title</key>
				<string></string>
				<key>type</key>
				<integer>3</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>F489E77B-6691-4ADB-80CD-A62E6DF15029</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>import json
import sys

from workflow import Workflow3


def main(wf):
    project = json.loads("{query}")
    wf.settings["project_gid"] = project["gid"]
    sys.stdout.write(project["name"])
    return 0


if __name__ == "__main__":
    wf = Workflow3()
    sys.exit(wf.run(main))</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>3</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>0CE6243C-714C-475E-99FB-298743B1029A</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>{query}</string>
				<key>title</key>
				<string>Default project set</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>12155588-A73A-4876-8BA2-39FA742BD898</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>conditions</key>
				<array>
					<dict>
						<key>inputstring</key>
						<string>{query}</string>
						<key>matchcasesensitive</key>
						<false/>
						<key>matchmode</key>
						<integer>0</integer>
						<key>matchstring</key>
						<string>%set_token</string>
						<key>outputlabel</key>
						<string>set token</string>
						<key>uid</key>
						<string>E67CB72C-CD05-43D7-B6A5-B3AC5720BA3E</string>
					</dict>
				</array>
				<key>elselabel</key>
				<string>set project</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.conditional</string>
			<key>uid</key>
			<string>5D0B3FEC-195C-4384-99B6-12A4DDFAA97B</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>matchmode</key>
				<integer>1</integer>
				<key>matchstring</key>
				<string>.*</string>
				<key>regexcaseinsensitive</key>
				<false/>
				<key>regexmultiline</key>
				<false/>
				<key>replacestring</key>
				<string></string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.replace</string>
			<key>uid</key>
			<string>8AF36CEE-15AC-4B4C-A652-6C099C7D9FED</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>asn set workspace</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>1</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Loading workspaces...</string>
				<key>script</key>
				<string>import json
import os
import sys

from asana.api import get_workspaces
from utils import get_token
from workflow import MATCH_ALL, MATCH_ALLCHARS, PasswordNotFound, Workflow3

CACHE_SECONDS = int(os.getenv("WORKSPACE_LIST_CACHE_SECONDS"))


def main(wf):
    token = get_token(wf)
    if not token:
        return 0

    query = "{query}"
    workspaces = wf.cached_data(
        "get_workspaces", lambda: get_workspaces(token), max_age=CACHE_SECONDS
    )
    filtered_workspaces = wf.filter(
        query,
        workspaces,
        lambda workspace: workspace["name"],
        match_on=MATCH_ALL ^ MATCH_ALLCHARS,
        min_score=20,
    )
    for workspace in filtered_workspaces:
        wf.add_item(
            "Select default Workspace", workspace["name"], valid=True, arg=json.dumps(workspace), uid=workspace["gid"]
        )
    if len(filtered_workspaces) == 0:
        wf.add_item(
            "No workspaces found",
            valid=False,
        )

    wf.send_feedback()
    return 0


if __name__ == "__main__":
    wf = Workflow3()
    sys.exit(wf.run(main))
</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Select default Workspace</string>
				<key>title</key>
				<string></string>
				<key>type</key>
				<integer>3</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>A836C5C2-B083-45F9-AD2A-99B508CCD964</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>import json
import sys

from workflow import Workflow3


def main(wf):
    workspace = json.loads("{query}")
    wf.settings["workspace_gid"] = workspace["gid"]
    sys.stdout.write(workspace["name"])
    return 0


if __name__ == "__main__":
    wf = Workflow3()
    sys.exit(wf.run(main))</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>3</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>40CF6DB0-8C55-4F34-A715-41FE82053916</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>{query}</string>
				<key>title</key>
				<string>Default workspace set</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>B57872F2-D938-4304-A0FA-0A0DA4478848</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>conditions</key>
				<array>
					<dict>
						<key>inputstring</key>
						<string>{query}</string>
						<key>matchcasesensitive</key>
						<false/>
						<key>matchmode</key>
						<integer>0</integer>
						<key>matchstring</key>
						<string>%set_token</string>
						<key>outputlabel</key>
						<string>set token</string>
						<key>uid</key>
						<string>E67CB72C-CD05-43D7-B6A5-B3AC5720BA3E</string>
					</dict>
				</array>
				<key>elselabel</key>
				<string>set workspace</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.conditional</string>
			<key>uid</key>
			<string>84804C2D-CB41-4392-B067-4E7C8BA4353A</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>matchmode</key>
				<integer>1</integer>
				<key>matchstring</key>
				<string>.*</string>
				<key>regexcaseinsensitive</key>
				<false/>
				<key>regexmultiline</key>
				<false/>
				<key>replacestring</key>
				<string></string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.replace</string>
			<key>uid</key>
			<string>A8C948C3-DD9E-4964-B03A-52050BE581E2</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>{query}</string>
				<key>title</key>
				<string>Spent hours field set</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>0DD01E73-7D47-4896-BD37-36C34937C33D</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>import json
import os
import sys

from asana.api import get_field_value
from workflow import Workflow3


def main(wf):
    field = json.loads("{query}")
    task = json.loads(os.getenv("task"))

    task_info = wf.stored_data("task_info")
    task_info[task["gid"]] = {
        "name": task["name"],
        "spent_hours_field_gid": field["gid"],
        "spent_hours": get_field_value(task, field["gid"]),
        "start_timestamp": None,
    }
    wf.store_data("task_info", task_info)
    sys.stdout.write(field["name"])
    return 0


if __name__ == "__main__":
    wf = Workflow3()
    sys.exit(wf.run(main))</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>3</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>5FB32237-CCB6-403D-9D61-7B5F35625B3E</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string></string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>1</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Loading fields...</string>
				<key>script</key>
				<string>import json
import os
import sys

from asana.api import get_fields, get_task
from utils import get_token
from workflow import MATCH_ALL, MATCH_ALLCHARS, Workflow3


def main(wf):
    query = "{query}"

    token = get_token(wf)
    task = json.loads(os.getenv("task"))
    # retrieve more information from the same task
    task = get_task(token, task["gid"])
    wf.setvar("task", json.dumps(task))

    # let user choose spent hours field
    fields = [field for field in get_fields(task) if "number_value" in field]
    filtered_fields = wf.filter(
        query,
        fields,
        lambda field: field["name"],
        match_on=MATCH_ALL ^ MATCH_ALLCHARS,
        min_score=20,
    )
    for field in filtered_fields:
        wf.add_item(
            "Select field to track spent hours", field["name"], valid=True, arg=json.dumps(field), uid=field["gid"]
        )
    if len(filtered_fields) == 0:
        wf.add_item(
            "Select field to track spent hours",
            "No field found. Please add a suitable field to the task",
            valid=False,
        )
    wf.send_feedback()
    return 0


if __name__ == "__main__":
    wf = Workflow3()
    sys.exit(wf.run(main))</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string></string>
				<key>title</key>
				<string>Select field to track spent hours</string>
				<key>type</key>
				<integer>3</integer>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>4FC54738-4C0B-4A00-9C35-59F77BA48898</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>matchmode</key>
				<integer>1</integer>
				<key>matchstring</key>
				<string>.*</string>
				<key>regexcaseinsensitive</key>
				<false/>
				<key>regexmultiline</key>
				<false/>
				<key>replacestring</key>
				<string></string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.replace</string>
			<key>uid</key>
			<string>8255AAFF-417C-405F-B306-3804A35755E0</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>conditions</key>
				<array>
					<dict>
						<key>inputstring</key>
						<string>{query}</string>
						<key>matchcasesensitive</key>
						<false/>
						<key>matchmode</key>
						<integer>0</integer>
						<key>matchstring</key>
						<string>%set_project</string>
						<key>outputlabel</key>
						<string>set project</string>
						<key>uid</key>
						<string>CF13B001-0067-4943-88C5-0D154230079A</string>
					</dict>
					<dict>
						<key>inputstring</key>
						<string>{query}</string>
						<key>matchcasesensitive</key>
						<false/>
						<key>matchmode</key>
						<integer>0</integer>
						<key>matchstring</key>
						<string>%set_workspace</string>
						<key>outputlabel</key>
						<string>set workspace</string>
						<key>uid</key>
						<string>E67CB72C-CD05-43D7-B6A5-B3AC5720BA3E</string>
					</dict>
					<dict>
						<key>inputstring</key>
						<string>{query}</string>
						<key>matchcasesensitive</key>
						<false/>
						<key>matchmode</key>
						<integer>0</integer>
						<key>matchstring</key>
						<string>%create_task</string>
						<key>outputlabel</key>
						<string>create task</string>
						<key>uid</key>
						<string>989D2871-4D3D-44C7-A453-029B8DE4E8FF</string>
					</dict>
					<dict>
						<key>inputstring</key>
						<string>{query}</string>
						<key>matchcasesensitive</key>
						<false/>
						<key>matchmode</key>
						<integer>0</integer>
						<key>matchstring</key>
						<string>%set_token</string>
						<key>outputlabel</key>
						<string>set token</string>
						<key>uid</key>
						<string>A62F4648-E1A1-4C85-8412-303DE2D7CC4C</string>
					</dict>
				</array>
				<key>elselabel</key>
				<string>start timer</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.conditional</string>
			<key>uid</key>
			<string>C293EC4D-36FB-4014-8CF9-9A6DB1072107</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>import json
import os
import sys
import time

from workflow import Workflow3


def main(wf):
    task = json.loads(os.getenv("task"))
    task_info = wf.stored_data("task_info")
    if task_info[task["gid"]]["start_timestamp"] is None:
        task_info[task["gid"]]["start_timestamp"] = time.time()
        wf.store_data("task_info", task_info)
        sys.stdout.write(task["name"])
        return 0
    else:
        sys.stdout.write("This task is already running!")
        return 0


if __name__ == "__main__":
    wf = Workflow3()
    sys.exit(wf.run(main))</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>3</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>E38F07D2-41A5-4290-AA74-B0539219F8BC</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>asn start</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Loading tasks...</string>
				<key>script</key>
				<string>import json
import os
import sys

from asana.api import get_user_task_list
from utils import get_default_project_gid, get_default_workspace_gid, get_token
from workflow import MATCH_ALL, MATCH_ALLCHARS, PasswordNotFound, Workflow3
from workflow.background import run_in_background

CACHE_SECONDS = int(os.getenv("TASK_LIST_CACHE_SECONDS"))


def main(wf):
    token = get_token(wf)
    if not token:
        return 0

    workspace_gid = get_default_workspace_gid(wf)
    if not workspace_gid:
        return 0

    project_gid = get_default_project_gid(wf)
    if not project_gid:
        return 0
    wf.logger.debug("configuration loaded")

    query = wf.args[0]

    if not wf.cached_data_fresh("get_user_task_list", CACHE_SECONDS):
        wf.logger.debug("loading updated tasks")
        run_in_background("update_tasks", ["/usr/local/bin/python", wf.workflowfile("update_tasks.py")])
    tasks = wf.cached_data(
        "get_user_task_list", lambda: get_user_task_list(token, "me", workspace_gid), max_age=0
    )
    filtered_tasks = wf.filter(
        query, tasks, lambda task: task["name"], match_on=MATCH_ALL ^ MATCH_ALLCHARS, min_score=20
    )
    wf.logger.debug("filtered_tasks computed")

    for task in filtered_tasks:
        wf.add_item("Start Timer", task["name"], valid=True, arg=json.dumps(task), uid=task["gid"])
    if len(filtered_tasks) == 0:
        wf.add_item(
            "No tasks found",
            'Create a new task "{0}"'.format(query),
            valid=True,
            arg="%create_task",
        )
        wf.setvar("task_name", query)

    wf.send_feedback()
    return 0


if __name__ == "__main__":
    wf = Workflow3(update_settings={"github_slug": "pinuz95/alfred-asana-tracker", "frequency": 1})

    if wf.update_available:
        wf.add_item(
            "New version available",
            "Click here to install the update",
            autocomplete="workflow:update",
        )

    sys.exit(wf.run(main))
</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Start the timer for an Asana task</string>
				<key>title</key>
				<string>Start Timer</string>
				<key>type</key>
				<integer>3</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>BB88F20A-B8E1-48D6-9D27-2A12174D5624</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>import json
import os
import sys

from workflow import Workflow3


def main(wf):
    task_gid = json.loads(os.getenv("task"))["gid"]

    if wf.stored_data("task_history") is None:
        wf.store_data("task_history", [])

    if wf.stored_data("task_info") is None:
        wf.store_data("task_info", {})

    task_info = wf.stored_data("task_info")
    if task_gid not in task_info or "start_timestamp" not in task_info[task_gid]:
        sys.stdout.write("%init_task")
    return 0


if __name__ == "__main__":
    wf = Workflow3()
    sys.exit(wf.run(main))</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>3</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>EFC316CD-00C4-40EC-885C-698142DA77F5</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>{query}</string>
				<key>title</key>
				<string>Timer started</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>A4E22521-C53F-418D-BC93-79166E299FE2</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>conditions</key>
				<array>
					<dict>
						<key>inputstring</key>
						<string>{query}</string>
						<key>matchcasesensitive</key>
						<false/>
						<key>matchmode</key>
						<integer>0</integer>
						<key>matchstring</key>
						<string>%init_task</string>
						<key>outputlabel</key>
						<string>init task</string>
						<key>uid</key>
						<string>E67CB72C-CD05-43D7-B6A5-B3AC5720BA3E</string>
					</dict>
				</array>
				<key>elselabel</key>
				<string>start timer</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.conditional</string>
			<key>uid</key>
			<string>DD5DA8E6-6612-40DF-9069-C254172E6842</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argument</key>
				<string>{query}</string>
				<key>passthroughargument</key>
				<false/>
				<key>variables</key>
				<dict>
					<key>task</key>
					<string>{query}</string>
				</dict>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.argument</string>
			<key>uid</key>
			<string>DFF88241-2225-4F77-B999-26D45929B05F</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>import os
import sys

from asana.api import create_task
from utils import get_token
from workflow import Workflow3
from workflow.background import run_in_background


def main(wf):
    token = get_token(wf)
    task_name = os.getenv("task_name")
    project_gid = wf.settings["project_gid"]

    create_task(token, {"name": task_name, "projects": [project_gid], "assignee": "me"})
    run_in_background("update_tasks", ["/usr/local/bin/python", wf.workflowfile("update_tasks.py")])

    sys.stdout.write(task_name)
    return 0


if __name__ == "__main__":
    wf = Workflow3()
    sys.exit(wf.run(main))</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>3</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>0C9C9CC4-3B18-4013-8083-FCB108F83588</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>escaping</key>
				<integer>68</integer>
				<key>keyword</key>
				<string>asn create</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>2</integer>
				<key>runningsubtext</key>
				<string></string>
				<key>script</key>
				<string>import sys

from utils import get_default_project_gid, get_token
from workflow import PasswordNotFound, Workflow3


def main(wf):
    token = get_token(wf)
    if not token:
        return 0

    project_gid = get_default_project_gid(wf)
    if not project_gid:
        return 0

    query = "{query}"
    wf.add_item("Create Task", 'Create a new task "{0}"'.format(query), valid=True, arg=query)
    wf.send_feedback()
    return 0


if __name__ == "__main__":
    wf = Workflow3()
    sys.exit(wf.run(main))</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Create a new Asana task</string>
				<key>title</key>
				<string>Create Task</string>
				<key>type</key>
				<integer>3</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>6CE4894A-D594-40F6-8ADB-EFD829034766</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>{query}</string>
				<key>title</key>
				<string>Task created</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>B9CE2989-5779-4950-BAE3-14C535A76B44</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>conditions</key>
				<array>
					<dict>
						<key>inputstring</key>
						<string>{query}</string>
						<key>matchcasesensitive</key>
						<false/>
						<key>matchmode</key>
						<integer>0</integer>
						<key>matchstring</key>
						<string>%set_project</string>
						<key>outputlabel</key>
						<string>set project</string>
						<key>uid</key>
						<string>E67CB72C-CD05-43D7-B6A5-B3AC5720BA3E</string>
					</dict>
					<dict>
						<key>inputstring</key>
						<string>{query}</string>
						<key>matchcasesensitive</key>
						<false/>
						<key>matchmode</key>
						<integer>0</integer>
						<key>matchstring</key>
						<string>%set_token</string>
						<key>outputlabel</key>
						<string>set token</string>
						<key>uid</key>
						<string>A8A3BE8A-F7D8-4A87-8E20-90BB823ABE1E</string>
					</dict>
				</array>
				<key>elselabel</key>
				<string>create task</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.conditional</string>
			<key>uid</key>
			<string>E5F82272-7CF7-4E47-8B82-966A725C31E9</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argument</key>
				<string>{query}</string>
				<key>passthroughargument</key>
				<false/>
				<key>variables</key>
				<dict>
					<key>task_name</key>
					<string>{query}</string>
				</dict>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.argument</string>
			<key>uid</key>
			<string>DF48C549-1ECF-4E52-9C1A-4FEF0124F209</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>{query}</string>
				<key>title</key>
				<string>Task completed</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>B5E90B4A-D1F5-43E1-892B-3F6F17D44210</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>import json
import sys

from asana.api import complete_task
from utils import get_default_workspace_gid, get_token, stop_task
from workflow import Workflow3
from workflow.background import run_in_background


def main(wf):
    token = get_token(wf)
    task = json.loads("{query}")
    query = task["name"]

    complete_task(token, task["gid"])
    run_in_background("update_tasks", ["/usr/bin/python", wf.workflowfile("update_tasks.py")])

    task_info = wf.stored_data("task_info")
    if task_info is not None and task["gid"] in task_info:
        if task_info[task["gid"]]["start_timestamp"] is not None:
            elapsed_hours = stop_task(wf, task["gid"])
            query = u"{} (running for {:.1f} hours)".format(task["name"], elapsed_hours)

        # clean task_info
        task_info = wf.stored_data("task_info")
        del task_info[task["gid"]]
        wf.store_data("task_info", task_info)

    sys.stdout.write(query)
    return 0


if __name__ == "__main__":
    wf = Workflow3()
    sys.exit(wf.run(main))</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>3</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>C80FD136-F125-466F-85AB-6669F343CC99</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>asn complete</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Loading tasks…</string>
				<key>script</key>
				<string>import json
import os
import sys

from asana.api import get_user_task_list
from utils import get_default_workspace_gid, get_token
from workflow import MATCH_ALL, MATCH_ALLCHARS, PasswordNotFound, Workflow3
from workflow.background import run_in_background

CACHE_SECONDS = int(os.getenv("TASK_LIST_CACHE_SECONDS"))


def main(wf):
    token = get_token(wf)
    if not token:
        return 0

    workspace_gid = get_default_workspace_gid(wf)
    if not workspace_gid:
        return 0

    wf.logger.debug("configuration loaded")

    query = "{query}"

    if not wf.cached_data_fresh("get_user_task_list", CACHE_SECONDS):
        run_in_background("update_tasks", ["/usr/bin/python", wf.workflowfile("update_tasks.py")])
    tasks = wf.cached_data(
        "get_user_task_list", lambda: get_user_task_list(token, "me", workspace_gid), max_age=0
    )
    filtered_tasks = wf.filter(
        query, tasks, lambda task: task["name"], match_on=MATCH_ALL ^ MATCH_ALLCHARS, min_score=20
    )
    wf.logger.debug("filtered_tasks computed")

    for task in filtered_tasks:
        wf.add_item("Complete Task", task["name"], valid=True, arg=json.dumps(task), uid=task["gid"])
    if len(filtered_tasks) == 0:
        wf.add_item(
            "No tasks found",
            valid=False,
        )

    wf.send_feedback()
    return 0


if __name__ == "__main__":
    wf = Workflow3()
    sys.exit(wf.run(main))</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Mark an Asana task complete</string>
				<key>title</key>
				<string>Complete Task</string>
				<key>type</key>
				<integer>3</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>F79B7E0A-779F-41AF-9484-E2BB15083B64</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>conditions</key>
				<array>
					<dict>
						<key>inputstring</key>
						<string>{query}</string>
						<key>matchcasesensitive</key>
						<false/>
						<key>matchmode</key>
						<integer>0</integer>
						<key>matchstring</key>
						<string>%set_workspace</string>
						<key>outputlabel</key>
						<string>set workspace</string>
						<key>uid</key>
						<string>E67CB72C-CD05-43D7-B6A5-B3AC5720BA3E</string>
					</dict>
					<dict>
						<key>inputstring</key>
						<string>{query}</string>
						<key>matchcasesensitive</key>
						<false/>
						<key>matchmode</key>
						<integer>0</integer>
						<key>matchstring</key>
						<string>%set_token</string>
						<key>outputlabel</key>
						<string>set token</string>
						<key>uid</key>
						<string>63738C59-74BB-4A3A-962B-3AFEBE193060</string>
					</dict>
				</array>
				<key>elselabel</key>
				<string>complete task</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.conditional</string>
			<key>uid</key>
			<string>F9C1C19E-5105-45DD-9857-FE7AC5939E40</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>{query}</string>
				<key>title</key>
				<string>Timer stopped</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>ACC025AC-6B45-4713-97C7-80D63853908B</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>import sys

from utils import stop_task
from workflow import Workflow3


def main(wf):
    task_gid = "{query}"
    task_name = wf.stored_data("task_info")[task_gid]["name"]
    elapsed_hours = stop_task(wf, task_gid)
    sys.stdout.write(u"{} (running for {:.1f} hours)".format(task_name, elapsed_hours))
    return 0


if __name__ == "__main__":
    wf = Workflow3()
    sys.exit(wf.run(main))</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>3</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>283BAFA7-68C2-4B95-A95C-FB4506BEDC4D</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>browser</key>
				<string></string>
				<key>spaces</key>
				<string></string>
				<key>url</key>
				<string>https://app.asana.com/0/developer-console</string>
				<key>utf8</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.openurl</string>
			<key>uid</key>
			<string>1A30DD4D-5A3A-4D4D-B407-0E6B568A88AC</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>asn stop</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Loading tasks…</string>
				<key>script</key>
				<string>import sys
import time

from utils import get_token
from workflow import MATCH_ALL, MATCH_ALLCHARS, PasswordNotFound, Workflow3


def main(wf):
    token = get_token(wf)
    if not token:
        return 0

    wf.logger.debug("configuration loaded")

    task_info = wf.stored_data("task_info")
    wf.logger.debug("task_info loaded")

    if task_info is None:
        wf.add_item("No running timers", valid=False)
        wf.send_feedback()
        return 0

    query = "{query}"
    running_tasks = [
        {
            "gid": task_gid,
            "name": u"{} (running for {:.1f} hours)".format(
                task_info[task_gid]["name"],
                (time.time() - task_info[task_gid]["start_timestamp"]) / 3600,
            ),
        }
        for task_gid in task_info
        if task_info[task_gid]["start_timestamp"] is not None
    ]
    wf.logger.debug("running_tasks computed")

    filtered_tasks = wf.filter(
        query,
        running_tasks,
        lambda task: task["name"],
        match_on=MATCH_ALL ^ MATCH_ALLCHARS,
        min_score=20,
    )
    wf.logger.debug("filtered_tasks computed")

    for task in filtered_tasks:
        wf.add_item("Stop Timer", task["name"], valid=True, arg=task["gid"], uid=task["gid"])
    if len(filtered_tasks) == 0:
        wf.add_item("No running timers", valid=False)

    wf.send_feedback()
    return 0


if __name__ == "__main__":
    wf = Workflow3()
    sys.exit(wf.run(main))</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Stop the timer for an Asana task</string>
				<key>title</key>
				<string>Stop Timer</string>
				<key>type</key>
				<integer>3</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>336CAF2F-4B07-49AF-BF07-5B96B95C2801</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>conditions</key>
				<array>
					<dict>
						<key>inputstring</key>
						<string>{query}</string>
						<key>matchcasesensitive</key>
						<false/>
						<key>matchmode</key>
						<integer>0</integer>
						<key>matchstring</key>
						<string>%set_token</string>
						<key>outputlabel</key>
						<string>set token</string>
						<key>uid</key>
						<string>E67CB72C-CD05-43D7-B6A5-B3AC5720BA3E</string>
					</dict>
				</array>
				<key>elselabel</key>
				<string>stop timer</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.conditional</string>
			<key>uid</key>
			<string>F0C22B21-294E-435D-83CA-A0BEA8D92CA0</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>import sys

from asana.api import get_workspaces
from workflow import Workflow3


def main(wf):
    token = "{query}"

    try:
        get_workspaces(token)
    except RuntimeError:
        sys.stdout.write("Authentication failed! Check your token and your internet connection")
        return 0

    wf.save_password("asana_personal_access_token", token)
    sys.stdout.write("Authentication succeeded! Enjoy the workflow")
    return 0


if __name__ == "__main__":
    wf = Workflow3()
    sys.exit(wf.run(main))</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>3</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>BB07AF18-F262-4F34-85DE-6905401946AC</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<true/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>escaping</key>
				<integer>68</integer>
				<key>keyword</key>
				<string>asn set token</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string></string>
				<key>script</key>
				<string>import sys

from workflow import Workflow3


def main(wf):
	wf.add_item(
		"Get your Personal Access Token from Asana",
		"Click to open the browser",
		valid=True,
		arg="%get_token",
    )
	wf.add_item(
		"Set your Personal Access Token",
		"Click to set your Personal Access Token",
		valid=True,
		arg="%set_token",
    )

	wf.send_feedback()
	return 0


if __name__ == "__main__":
	wf = Workflow3()
	sys.exit(wf.run(main))
</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Set your Personal Access Token</string>
				<key>title</key>
				<string></string>
				<key>type</key>
				<integer>3</integer>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>47D97526-F5A1-4377-B446-5ECCD709DF74</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>subtext</key>
				<string>Paste it here and press enter</string>
				<key>text</key>
				<string>Set your Personal Access Token</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>CEF43D54-F9E3-43D7-A4F3-654B6D4360B6</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>import sys

from utils import generate_report
from workflow import Workflow3


def main(wf):
    generate_report(wf, "{query}")
    return 0


if __name__ == "__main__":
    wf = Workflow3()
    sys.exit(wf.run(main))</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>3</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>D04C032E-4935-4CA7-BA2D-76866C84C8BE</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>68</integer>
				<key>keyword</key>
				<string>asn report</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>1</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string></string>
				<key>script</key>
				<string>import sys

from utils import get_token, string_to_seconds
from workflow import Workflow3


def main(wf):
    token = get_token(wf)
    if not token:
        return 0
    wf.logger.debug("configuration loaded")

    if wf.stored_data("task_history") is None:
        wf.add_item("Generate Report", "No data to show", valid=False)
        wf.send_feedback()
        return 0

    query = "{query}"
    if not query:
        query = "day"

    if string_to_seconds(query):
        wf.add_item(
            "Generate Report", "Show a report of the last {}".format(query), valid=True, arg=query
        )
    else:
        wf.add_item("Generate Report", '"{}" is not a valid time unit'.format(query), valid=False)
    wf.send_feedback()
    return 0


if __name__ == "__main__":
    wf = Workflow3()
    sys.exit(wf.run(main))</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Show a report of what you have done</string>
				<key>title</key>
				<string>Generate Report</string>
				<key>type</key>
				<integer>3</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>87A4FBBB-B4F7-481F-97EF-BF1295C1614E</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>{query}</string>
				<key>title</key>
				<string>Authentication</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>54A7E923-789C-4D73-9346-631031EE2394</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>conditions</key>
				<array>
					<dict>
						<key>inputstring</key>
						<string>{query}</string>
						<key>matchcasesensitive</key>
						<false/>
						<key>matchmode</key>
						<integer>0</integer>
						<key>matchstring</key>
						<string>%get_token</string>
						<key>outputlabel</key>
						<string>get token</string>
						<key>uid</key>
						<string>F6837E6D-3185-490D-8854-EE81832250CB</string>
					</dict>
					<dict>
						<key>inputstring</key>
						<string>{query}</string>
						<key>matchcasesensitive</key>
						<false/>
						<key>matchmode</key>
						<integer>0</integer>
						<key>matchstring</key>
						<string>%set_token</string>
						<key>outputlabel</key>
						<string>set token</string>
						<key>uid</key>
						<string>E67CB72C-CD05-43D7-B6A5-B3AC5720BA3E</string>
					</dict>
				</array>
				<key>elselabel</key>
				<string></string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.conditional</string>
			<key>uid</key>
			<string>1E432292-7E99-45F7-BD45-CEECF5AFCFA0</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>conditions</key>
				<array>
					<dict>
						<key>inputstring</key>
						<string>{query}</string>
						<key>matchcasesensitive</key>
						<false/>
						<key>matchmode</key>
						<integer>0</integer>
						<key>matchstring</key>
						<string>%set_token</string>
						<key>outputlabel</key>
						<string>set token</string>
						<key>uid</key>
						<string>E67CB72C-CD05-43D7-B6A5-B3AC5720BA3E</string>
					</dict>
				</array>
				<key>elselabel</key>
				<string>generate report</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.conditional</string>
			<key>uid</key>
			<string>0C4BE506-024B-42E9-B927-6038D381B10B</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>matchmode</key>
				<integer>1</integer>
				<key>matchstring</key>
				<string>.*</string>
				<key>regexcaseinsensitive</key>
				<false/>
				<key>regexmultiline</key>
				<false/>
				<key>replacestring</key>
				<string></string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.replace</string>
			<key>uid</key>
			<string>D8740DEC-694B-4897-9488-0542188AA7CC</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>matchmode</key>
				<integer>1</integer>
				<key>matchstring</key>
				<string>.*</string>
				<key>regexcaseinsensitive</key>
				<false/>
				<key>regexmultiline</key>
				<false/>
				<key>replacestring</key>
				<string></string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.replace</string>
			<key>uid</key>
			<string>62ECF140-70C7-4B72-8FD8-5C3047061EA1</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>{query}</string>
				<key>title</key>
				<string>Timer cancelled</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>48BBBA45-8BE9-4621-87B7-E7B5CAB82CFD</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>asn cancel</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Loading tasks…</string>
				<key>script</key>
				<string>import sys
import time

from utils import get_token
from workflow import MATCH_ALL, MATCH_ALLCHARS, PasswordNotFound, Workflow3


def main(wf):
    token = get_token(wf)
    if not token:
        return 0
    wf.logger.debug("configuration loaded")

    task_info = wf.stored_data("task_info")
    wf.logger.debug("task_info loaded")

    if task_info is None:
        wf.add_item("No running timers", valid=False)
        wf.send_feedback()
        return 0

    query = "{query}"
    running_tasks = [
        {
            "gid": task_gid,
            "name": u"{} (running for {:.1f} hours)".format(
                task_info[task_gid]["name"],
                (time.time() - task_info[task_gid]["start_timestamp"]) / 3600,
            ),
        }
        for task_gid in task_info
        if task_info[task_gid]["start_timestamp"] is not None
    ]
    wf.logger.debug("running_tasks computed")
    filtered_tasks = wf.filter(
        query,
        running_tasks,
        lambda task: task["name"],
        match_on=MATCH_ALL ^ MATCH_ALLCHARS,
        min_score=20,
    )
    wf.logger.debug("filtered_tasks computed")

    for task in filtered_tasks:
        wf.add_item("Cancel Timer", task["name"], valid=True, arg=task["gid"], uid=task["gid"])
    if len(filtered_tasks) == 0:
        wf.add_item("No running timers", valid=False)

    wf.send_feedback()
    return 0


if __name__ == "__main__":
    wf = Workflow3()
    sys.exit(wf.run(main))</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Cancel the timer of an Asana task</string>
				<key>title</key>
				<string>Cancel Timer</string>
				<key>type</key>
				<integer>3</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>FB6B0D28-60A2-4298-9AE7-9741A1BC8F02</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>import sys

from workflow import Workflow3


def main(wf):
	task_gid = "{query}"

	# cancel the timer
	task_info = wf.stored_data("task_info")
	task_info[task_gid]["start_timestamp"] = None
	wf.store_data("task_info", task_info)

	task_name = task_info[task_gid]["name"]
	sys.stdout.write(task_name)
	return 0


if __name__ == "__main__":
	wf = Workflow3()
	sys.exit(wf.run(main))</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>3</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>87418458-8B72-4FF0-B37D-02D77C9A82C7</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>conditions</key>
				<array>
					<dict>
						<key>inputstring</key>
						<string>{query}</string>
						<key>matchcasesensitive</key>
						<false/>
						<key>matchmode</key>
						<integer>0</integer>
						<key>matchstring</key>
						<string>%set_token</string>
						<key>outputlabel</key>
						<string>set token</string>
						<key>uid</key>
						<string>E67CB72C-CD05-43D7-B6A5-B3AC5720BA3E</string>
					</dict>
				</array>
				<key>elselabel</key>
				<string>cancel timer</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.conditional</string>
			<key>uid</key>
			<string>9C031572-A8B4-4134-8F7C-986908E0E7B0</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>{query}</string>
				<key>title</key>
				<string>Task reset</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>AE7939C9-A501-420D-B59D-F9F018611002</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>asn reset</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Loading tasks…</string>
				<key>script</key>
				<string>import sys
import time

from utils import get_token
from workflow import MATCH_ALL, MATCH_ALLCHARS, PasswordNotFound, Workflow3


def main(wf):
    token = get_token(wf)
    if not token:
        return 0
    wf.logger.debug("configuration loaded")

    task_info = wf.stored_data("task_info")
    wf.logger.debug("task_info loaded")

    if task_info is None:
        wf.add_item("No saved tasks", valid=False)
        wf.send_feedback()
        return 0

    query = "{query}"
    saved_tasks = [
        {
            "gid": task_gid,
            "name": task_info[task_gid]["name"],
        }
        for task_gid in task_info
    ]
    wf.logger.debug("saved_tasks computed")
    filtered_tasks = wf.filter(
        query,
        saved_tasks,
        lambda task: task["name"],
        match_on=MATCH_ALL ^ MATCH_ALLCHARS,
        min_score=20,
    )
    wf.logger.debug("filtered_tasks computed")

    for task in filtered_tasks:
        wf.add_item("Reset Task", task["name"], valid=True, arg=task["gid"], uid=task["gid"])
    if len(filtered_tasks) == 0:
        wf.add_item("No saved tasks", valid=False)

    wf.send_feedback()
    return 0


if __name__ == "__main__":
    wf = Workflow3()
    sys.exit(wf.run(main))</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Reset Alfred's knowledge on a Asana task</string>
				<key>title</key>
				<string>Reset Task</string>
				<key>type</key>
				<integer>3</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>6C43B7F2-E0F5-45CC-9C13-8EDBF49AFA35</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>import sys

from workflow import Workflow3


def main(wf):
	task_gid = "{query}"

	# delete task's info
	task_info = wf.stored_data("task_info")
	task_name = task_info[task_gid]["name"]
	del task_info[task_gid]
	wf.store_data("task_info", task_info)

	sys.stdout.write(task_name)
	return 0


if __name__ == "__main__":
	wf = Workflow3()
	sys.exit(wf.run(main))</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>3</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>BDA1B503-0986-4148-ACBD-425E5405B9AC</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>conditions</key>
				<array>
					<dict>
						<key>inputstring</key>
						<string>{query}</string>
						<key>matchcasesensitive</key>
						<false/>
						<key>matchmode</key>
						<integer>0</integer>
						<key>matchstring</key>
						<string>%set_token</string>
						<key>outputlabel</key>
						<string>set token</string>
						<key>uid</key>
						<string>E67CB72C-CD05-43D7-B6A5-B3AC5720BA3E</string>
					</dict>
				</array>
				<key>elselabel</key>
				<string>reset task</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.conditional</string>
			<key>uid</key>
			<string>9B8986E6-2B75-4F52-8277-EC33644ACACA</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>Changelog
=========


Version 0.3.2 - 2021-03-08
--------------------------

### Bug fixes

* Fix field value read bug



Version 0.3.1 - 2021-01-25
--------------------------

### Bug fixes

* Fix special characters encoding in tasks names



Version 0.3.0 - 2020-12-03
--------------------------

### Features

* Show recently used items first
* In the report, aggregate small tasks in "Other"



Version 0.2.0 - 2020-11-18
--------------------------

### Features

* Cancel a timer
* Reset knowledge on a task



Version 0.1.1 - 2020-11-16
--------------------------

### Bug fixes

* Fix a bug in task creation



Version 0.1.0 - 2020-11-16
--------------------------

### Features

* Create a task
* Mark a task complete
* Track the time spent on a task
* Show a report of what you have done</string>
	<key>uidata</key>
	<dict>
		<key>0C4BE506-024B-42E9-B927-6038D381B10B</key>
		<dict>
			<key>colorindex</key>
			<integer>8</integer>
			<key>xpos</key>
			<integer>245</integer>
			<key>ypos</key>
			<integer>1070</integer>
		</dict>
		<key>0C9C9CC4-3B18-4013-8083-FCB108F83588</key>
		<dict>
			<key>colorindex</key>
			<integer>4</integer>
			<key>xpos</key>
			<integer>645</integer>
			<key>ypos</key>
			<integer>640</integer>
		</dict>
		<key>0CE6243C-714C-475E-99FB-298743B1029A</key>
		<dict>
			<key>colorindex</key>
			<integer>1</integer>
			<key>xpos</key>
			<integer>1010</integer>
			<key>ypos</key>
			<integer>170</integer>
		</dict>
		<key>0DD01E73-7D47-4896-BD37-36C34937C33D</key>
		<dict>
			<key>colorindex</key>
			<integer>3</integer>
			<key>xpos</key>
			<integer>1365</integer>
			<key>ypos</key>
			<integer>340</integer>
		</dict>
		<key>12155588-A73A-4876-8BA2-39FA742BD898</key>
		<dict>
			<key>colorindex</key>
			<integer>1</integer>
			<key>xpos</key>
			<integer>1190</integer>
			<key>ypos</key>
			<integer>170</integer>
		</dict>
		<key>1A30DD4D-5A3A-4D4D-B407-0E6B568A88AC</key>
		<dict>
			<key>xpos</key>
			<integer>1190</integer>
			<key>ypos</key>
			<integer>910</integer>
		</dict>
		<key>1E432292-7E99-45F7-BD45-CEECF5AFCFA0</key>
		<dict>
			<key>xpos</key>
			<integer>1015</integer>
			<key>ypos</key>
			<integer>1055</integer>
		</dict>
		<key>283BAFA7-68C2-4B95-A95C-FB4506BEDC4D</key>
		<dict>
			<key>colorindex</key>
			<integer>6</integer>
			<key>xpos</key>
			<integer>645</integer>
			<key>ypos</key>
			<integer>910</integer>
		</dict>
		<key>336CAF2F-4B07-49AF-BF07-5B96B95C2801</key>
		<dict>
			<key>colorindex</key>
			<integer>6</integer>
			<key>xpos</key>
			<integer>80</integer>
			<key>ypos</key>
			<integer>910</integer>
		</dict>
		<key>40CF6DB0-8C55-4F34-A715-41FE82053916</key>
		<dict>
			<key>colorindex</key>
			<integer>2</integer>
			<key>xpos</key>
			<integer>1010</integer>
			<key>ypos</key>
			<integer>295</integer>
		</dict>
		<key>47D97526-F5A1-4377-B446-5ECCD709DF74</key>
		<dict>
			<key>xpos</key>
			<integer>830</integer>
			<key>ypos</key>
			<integer>1050</integer>
		</dict>
		<key>48BBBA45-8BE9-4621-87B7-E7B5CAB82CFD</key>
		<dict>
			<key>colorindex</key>
			<integer>9</integer>
			<key>xpos</key>
			<integer>830</integer>
			<key>ypos</key>
			<integer>1195</integer>
		</dict>
		<key>4FC54738-4C0B-4A00-9C35-59F77BA48898</key>
		<dict>
			<key>colorindex</key>
			<integer>3</integer>
			<key>xpos</key>
			<integer>1010</integer>
			<key>ypos</key>
			<integer>420</integer>
		</dict>
		<key>54A7E923-789C-4D73-9346-631031EE2394</key>
		<dict>
			<key>xpos</key>
			<integer>1540</integer>
			<key>ypos</key>
			<integer>1050</integer>
		</dict>
		<key>5D0B3FEC-195C-4384-99B6-12A4DDFAA97B</key>
		<dict>
			<key>colorindex</key>
			<integer>1</integer>
			<key>xpos</key>
			<integer>845</integer>
			<key>ypos</key>
			<integer>190</integer>
		</dict>
		<key>5FB32237-CCB6-403D-9D61-7B5F35625B3E</key>
		<dict>
			<key>colorindex</key>
			<integer>3</integer>
			<key>note</key>
			<string>Initialize new task here</string>
			<key>xpos</key>
			<integer>1190</integer>
			<key>ypos</key>
			<integer>420</integer>
		</dict>
		<key>62ECF140-70C7-4B72-8FD8-5C3047061EA1</key>
		<dict>
			<key>xpos</key>
			<integer>1145</integer>
			<key>ypos</key>
			<integer>1080</integer>
		</dict>
		<key>6C43B7F2-E0F5-45CC-9C13-8EDBF49AFA35</key>
		<dict>
			<key>colorindex</key>
			<integer>10</integer>
			<key>xpos</key>
			<integer>80</integer>
			<key>ypos</key>
			<integer>1345</integer>
		</dict>
		<key>6CE4894A-D594-40F6-8ADB-EFD829034766</key>
		<dict>
			<key>colorindex</key>
			<integer>4</integer>
			<key>xpos</key>
			<integer>80</integer>
			<key>ypos</key>
			<integer>640</integer>
		</dict>
		<key>8255AAFF-417C-405F-B306-3804A35755E0</key>
		<dict>
			<key>colorindex</key>
			<integer>3</integer>
			<key>xpos</key>
			<integer>965</integer>
			<key>ypos</key>
			<integer>450</integer>
		</dict>
		<key>84804C2D-CB41-4392-B067-4E7C8BA4353A</key>
		<dict>
			<key>colorindex</key>
			<integer>2</integer>
			<key>xpos</key>
			<integer>835</integer>
			<key>ypos</key>
			<integer>315</integer>
		</dict>
		<key>87418458-8B72-4FF0-B37D-02D77C9A82C7</key>
		<dict>
			<key>colorindex</key>
			<integer>9</integer>
			<key>xpos</key>
			<integer>645</integer>
			<key>ypos</key>
			<integer>1195</integer>
		</dict>
		<key>87A4FBBB-B4F7-481F-97EF-BF1295C1614E</key>
		<dict>
			<key>colorindex</key>
			<integer>8</integer>
			<key>xpos</key>
			<integer>80</integer>
			<key>ypos</key>
			<integer>1050</integer>
		</dict>
		<key>8AF36CEE-15AC-4B4C-A652-6C099C7D9FED</key>
		<dict>
			<key>colorindex</key>
			<integer>1</integer>
			<key>xpos</key>
			<integer>600</integer>
			<key>ypos</key>
			<integer>200</integer>
		</dict>
		<key>9B8986E6-2B75-4F52-8277-EC33644ACACA</key>
		<dict>
			<key>colorindex</key>
			<integer>10</integer>
			<key>xpos</key>
			<integer>260</integer>
			<key>ypos</key>
			<integer>1365</integer>
		</dict>
		<key>9C031572-A8B4-4134-8F7C-986908E0E7B0</key>
		<dict>
			<key>colorindex</key>
			<integer>9</integer>
			<key>xpos</key>
			<integer>255</integer>
			<key>ypos</key>
			<integer>1215</integer>
		</dict>
		<key>A4E22521-C53F-418D-BC93-79166E299FE2</key>
		<dict>
			<key>colorindex</key>
			<integer>3</integer>
			<key>xpos</key>
			<integer>1540</integer>
			<key>ypos</key>
			<integer>505</integer>
		</dict>
		<key>A836C5C2-B083-45F9-AD2A-99B508CCD964</key>
		<dict>
			<key>colorindex</key>
			<integer>2</integer>
			<key>xpos</key>
			<integer>645</integer>
			<key>ypos</key>
			<integer>295</integer>
		</dict>
		<key>A8C948C3-DD9E-4964-B03A-52050BE581E2</key>
		<dict>
			<key>colorindex</key>
			<integer>2</integer>
			<key>xpos</key>
			<integer>600</integer>
			<key>ypos</key>
			<integer>325</integer>
		</dict>
		<key>ACC025AC-6B45-4713-97C7-80D63853908B</key>
		<dict>
			<key>colorindex</key>
			<integer>6</integer>
			<key>xpos</key>
			<integer>830</integer>
			<key>ypos</key>
			<integer>910</integer>
		</dict>
		<key>AE7939C9-A501-420D-B59D-F9F018611002</key>
		<dict>
			<key>colorindex</key>
			<integer>10</integer>
			<key>xpos</key>
			<integer>830</integer>
			<key>ypos</key>
			<integer>1345</integer>
		</dict>
		<key>B57872F2-D938-4304-A0FA-0A0DA4478848</key>
		<dict>
			<key>colorindex</key>
			<integer>2</integer>
			<key>xpos</key>
			<integer>1190</integer>
			<key>ypos</key>
			<integer>295</integer>
		</dict>
		<key>B5E90B4A-D1F5-43E1-892B-3F6F17D44210</key>
		<dict>
			<key>colorindex</key>
			<integer>5</integer>
			<key>xpos</key>
			<integer>830</integer>
			<key>ypos</key>
			<integer>775</integer>
		</dict>
		<key>B9CE2989-5779-4950-BAE3-14C535A76B44</key>
		<dict>
			<key>colorindex</key>
			<integer>4</integer>
			<key>xpos</key>
			<integer>830</integer>
			<key>ypos</key>
			<integer>640</integer>
		</dict>
		<key>BB07AF18-F262-4F34-85DE-6905401946AC</key>
		<dict>
			<key>xpos</key>
			<integer>1365</integer>
			<key>ypos</key>
			<integer>1050</integer>
		</dict>
		<key>BB88F20A-B8E1-48D6-9D27-2A12174D5624</key>
		<dict>
			<key>colorindex</key>
			<integer>3</integer>
			<key>note</key>
			<string>Check for new updates here</string>
			<key>xpos</key>
			<integer>80</integer>
			<key>ypos</key>
			<integer>505</integer>
		</dict>
		<key>BDA1B503-0986-4148-ACBD-425E5405B9AC</key>
		<dict>
			<key>colorindex</key>
			<integer>10</integer>
			<key>xpos</key>
			<integer>645</integer>
			<key>ypos</key>
			<integer>1345</integer>
		</dict>
		<key>C293EC4D-36FB-4014-8CF9-9A6DB1072107</key>
		<dict>
			<key>colorindex</key>
			<integer>3</integer>
			<key>xpos</key>
			<integer>245</integer>
			<key>ypos</key>
			<integer>480</integer>
		</dict>
		<key>C80FD136-F125-466F-85AB-6669F343CC99</key>
		<dict>
			<key>colorindex</key>
			<integer>5</integer>
			<key>xpos</key>
			<integer>645</integer>
			<key>ypos</key>
			<integer>775</integer>
		</dict>
		<key>CEF43D54-F9E3-43D7-A4F3-654B6D4360B6</key>
		<dict>
			<key>xpos</key>
			<integer>1190</integer>
			<key>ypos</key>
			<integer>1050</integer>
		</dict>
		<key>D04C032E-4935-4CA7-BA2D-76866C84C8BE</key>
		<dict>
			<key>colorindex</key>
			<integer>8</integer>
			<key>xpos</key>
			<integer>405</integer>
			<key>ypos</key>
			<integer>1050</integer>
		</dict>
		<key>D8740DEC-694B-4897-9488-0542188AA7CC</key>
		<dict>
			<key>xpos</key>
			<integer>785</integer>
			<key>ypos</key>
			<integer>1080</integer>
		</dict>
		<key>DD5DA8E6-6612-40DF-9069-C254172E6842</key>
		<dict>
			<key>colorindex</key>
			<integer>3</integer>
			<key>xpos</key>
			<integer>850</integer>
			<key>ypos</key>
			<integer>510</integer>
		</dict>
		<key>DF48C549-1ECF-4E52-9C1A-4FEF0124F209</key>
		<dict>
			<key>colorindex</key>
			<integer>4</integer>
			<key>xpos</key>
			<integer>600</integer>
			<key>ypos</key>
			<integer>670</integer>
		</dict>
		<key>DFF88241-2225-4F77-B999-26D45929B05F</key>
		<dict>
			<key>colorindex</key>
			<integer>3</integer>
			<key>xpos</key>
			<integer>600</integer>
			<key>ypos</key>
			<integer>535</integer>
		</dict>
		<key>E38F07D2-41A5-4290-AA74-B0539219F8BC</key>
		<dict>
			<key>colorindex</key>
			<integer>3</integer>
			<key>xpos</key>
			<integer>1365</integer>
			<key>ypos</key>
			<integer>505</integer>
		</dict>
		<key>E5F82272-7CF7-4E47-8B82-966A725C31E9</key>
		<dict>
			<key>colorindex</key>
			<integer>4</integer>
			<key>xpos</key>
			<integer>255</integer>
			<key>ypos</key>
			<integer>645</integer>
		</dict>
		<key>EFC316CD-00C4-40EC-885C-698142DA77F5</key>
		<dict>
			<key>colorindex</key>
			<integer>3</integer>
			<key>note</key>
			<string>Inizialize permanent files here</string>
			<key>xpos</key>
			<integer>645</integer>
			<key>ypos</key>
			<integer>505</integer>
		</dict>
		<key>F0C22B21-294E-435D-83CA-A0BEA8D92CA0</key>
		<dict>
			<key>colorindex</key>
			<integer>6</integer>
			<key>xpos</key>
			<integer>255</integer>
			<key>ypos</key>
			<integer>930</integer>
		</dict>
		<key>F489E77B-6691-4ADB-80CD-A62E6DF15029</key>
		<dict>
			<key>colorindex</key>
			<integer>1</integer>
			<key>xpos</key>
			<integer>645</integer>
			<key>ypos</key>
			<integer>170</integer>
		</dict>
		<key>F79B7E0A-779F-41AF-9484-E2BB15083B64</key>
		<dict>
			<key>colorindex</key>
			<integer>5</integer>
			<key>xpos</key>
			<integer>80</integer>
			<key>ypos</key>
			<integer>775</integer>
		</dict>
		<key>F9C1C19E-5105-45DD-9857-FE7AC5939E40</key>
		<dict>
			<key>colorindex</key>
			<integer>5</integer>
			<key>xpos</key>
			<integer>245</integer>
			<key>ypos</key>
			<integer>780</integer>
		</dict>
		<key>FB6B0D28-60A2-4298-9AE7-9741A1BC8F02</key>
		<dict>
			<key>colorindex</key>
			<integer>9</integer>
			<key>xpos</key>
			<integer>80</integer>
			<key>ypos</key>
			<integer>1195</integer>
		</dict>
	</dict>
	<key>variables</key>
	<dict>
		<key>PROJECT_LIST_CACHE_SECONDS</key>
		<string>60</string>
		<key>TASK_LIST_CACHE_SECONDS</key>
		<string>60</string>
		<key>WORKSPACE_LIST_CACHE_SECONDS</key>
		<string>86400</string>
	</dict>
	<key>version</key>
	<string>0.3.2.1</string>
	<key>webaddress</key>
	<string>https://github.com/exiledfox/alfred-asana-tracker</string>
</dict>
</plist>
